services:
  #kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
    networks:
      - app-network

  kafka-1:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://kafka-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
    depends_on:
      - zookeeper
    networks:
      - app-network
  kafka-2:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:19093,EXTERNAL://kafka-2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 2
    depends_on:
      - zookeeper
    networks:
      - app-network
  kafka-3:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:19094,EXTERNAL://kafka-3:9094

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 3
    depends_on:
      - zookeeper
    networks:
      - app-network
  #Flink
  flink-jobmanager:
    image: flink:1.17
    container_name: flink-jobmanager
    hostname: jobmanager
    ports:
      - "8081:8081" # Flink Dashboard
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    command: jobmanager
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - app-network

  # Flink TaskManager
  flink-taskmanager:
    image: flink:1.17
    container_name: flink-taskmanager
    hostname: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    command: taskmanager
    depends_on:
      - flink-jobmanager
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - app-network
  #Redis
  redis:
    image: redis:6.0.7
    container_name: redis
    restart: always
    volumes:
      - redis_volume_data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network
  redis_insight:
    image: redislabs/redisinsight:1.14.0
    container_name: redis_insight
    restart: always
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_volume_data:/db
    networks:
      - app-network
  # PostgreSQL Database
  postgres:
    build:
      context: ./database
      dockerfile: Dockerfile
    environment:
      DATABASE_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network

  # PgAdmin
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    networks:
      - app-network
  es01:
    networks:
      - app-network
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - network.host=0.0.0.0
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -u elastic:changeme -s http://localhost:9200",
        ]
      interval: 5s
      timeout: 5s
      retries: 0
      start_period: 15s
  # logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.2
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
      - "5060:5000"
    networks:
        - app-network
  #kibana
  kibana:
    networks:
      - app-network
    depends_on:
      es01:
        condition: service_started
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8762:8762"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
    depends_on:
      - discovery-server
    networks:
      - app-network

  # Discovery Server
  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - app-network
    environment:
      - eureka.instance.hostname=discovery-server
      - eureka.client.register-with-eureka=false
      - eureka.client.fetch-registry=false
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 30s
  #Chat service
  chat:
    build:
      context: ./ClientServiceHub
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    depends_on:
      - postgres
      - discovery-server
    networks:
      - app-network

  # Basket Service
  basket:
    build:
      context: ./basket
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      - discovery-server
      - redis
    networks:
      - app-network

  # Security Service
  security:
    build:
      context: ./security-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/security_service
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
    depends_on:
      postgres:
        condition: service_healthy
      discovery-server:
        condition: service_started
    networks:
      - app-network
  # Payment Service
  payment:
    build:
      context: ./payments
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
    depends_on:
      discovery-server:
        condition: service_started
    networks:
      - app-network
  # Stat Service
  stat:
    build:
      context: ./statistics
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    depends_on:
      postgres:
        condition: service_started
      kafka-1:
        condition: service_started
      es01:
        condition: service_started
    networks:
      - app-network
  # Order Service
  order:
    build:
      context: ./order
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      - postgres
      - discovery-server
      - kafka-1
    networks:
      - app-network
  # Restaurant Service
  restaurant:
    build:
      context: ./restaurant-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_ELASTICSEARCH_URIS: http://es01:9200
      GOOGLE_CREDENTIALS_PATH: /app/cred.json
    depends_on:
      postgres:
        condition: service_healthy
      discovery-server:
        condition: service_started
      es01:
        condition: service_started
    volumes:
      - ./cred.json:/app/cred.json
    networks:
      - app-network

  # Notification Service
  notification:
    build:
      context: ./notification
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    networks:
      - app-network
volumes:
  postgres:
  pgadmin:
  redis_volume_data:
  redis_insight_volume_data:
  certs:
    driver: local
  esdata01:
    driver: local
  esdata02:
    driver: local
  esdata03:
    driver: local
  kibanadata:
    driver: local

networks:
  app-network:
    driver: bridge
